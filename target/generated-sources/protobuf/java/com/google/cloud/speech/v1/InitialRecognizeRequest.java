// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/speech/v1/cloud-speech.proto

package com.google.cloud.speech.v1;

/**
 * Protobuf type {@code google.cloud.speech.v1.InitialRecognizeRequest}
 *
 * <pre>
 * The `InitialRecognizeRequest` message provides information to the recognizer
 * that specifies how to process the request.
 * </pre>
 */
public  final class InitialRecognizeRequest extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:google.cloud.speech.v1.InitialRecognizeRequest)
    InitialRecognizeRequestOrBuilder {
  // Use InitialRecognizeRequest.newBuilder() to construct.
  private InitialRecognizeRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private InitialRecognizeRequest() {
    encoding_ = 0;
    sampleRate_ = 0;
    languageCode_ = "";
    maxAlternatives_ = 0;
    profanityFilter_ = false;
    continuous_ = false;
    interimResults_ = false;
    enableEndpointerEvents_ = false;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private InitialRecognizeRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            int rawValue = input.readEnum();

            encoding_ = rawValue;
            break;
          }
          case 16: {

            sampleRate_ = input.readInt32();
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            languageCode_ = s;
            break;
          }
          case 32: {

            maxAlternatives_ = input.readInt32();
            break;
          }
          case 40: {

            profanityFilter_ = input.readBool();
            break;
          }
          case 48: {

            continuous_ = input.readBool();
            break;
          }
          case 56: {

            interimResults_ = input.readBool();
            break;
          }
          case 64: {

            enableEndpointerEvents_ = input.readBool();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(
          new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this));
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.cloud.speech.v1.SpeechProto.internal_static_google_cloud_speech_v1_InitialRecognizeRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.speech.v1.SpeechProto.internal_static_google_cloud_speech_v1_InitialRecognizeRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.speech.v1.InitialRecognizeRequest.class, com.google.cloud.speech.v1.InitialRecognizeRequest.Builder.class);
  }

  /**
   * Protobuf enum {@code google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding}
   *
   * <pre>
   * Audio encoding of the data sent in the audio message.
   * </pre>
   */
  public enum AudioEncoding
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ENCODING_UNSPECIFIED = 0;</code>
     *
     * <pre>
     * Not specified. Will return result `INVALID_ARGUMENT`.
     * </pre>
     */
    ENCODING_UNSPECIFIED(0, 0),
    /**
     * <code>LINEAR16 = 1;</code>
     *
     * <pre>
     * Uncompressed 16-bit signed little-endian samples.
     * This is the simplest encoding format, useful for getting started.
     * However, because it is uncompressed, it is not recommended for deployed
     * clients.
     * </pre>
     */
    LINEAR16(1, 1),
    /**
     * <code>FLAC = 2;</code>
     *
     * <pre>
     * This is the recommended encoding format because it uses lossless
     * compression; therefore recognition accuracy is not compromised by a lossy
     * codec.
     * The stream FLAC format is specified at:
     * http://flac.sourceforge.net/documentation.html.
     * Only 16-bit samples are supported.
     * Not all fields in STREAMINFO are supported.
     * </pre>
     */
    FLAC(2, 2),
    /**
     * <code>MULAW = 3;</code>
     *
     * <pre>
     * 8-bit samples that compand 14-bit audio samples using PCMU/mu-law.
     * </pre>
     */
    MULAW(3, 3),
    /**
     * <code>AMR = 4;</code>
     *
     * <pre>
     * Adaptive Multi-Rate Narrowband codec. `sample_rate` must be 8000 Hz.
     * </pre>
     */
    AMR(4, 4),
    /**
     * <code>AMR_WB = 5;</code>
     *
     * <pre>
     * Adaptive Multi-Rate Wideband codec. `sample_rate` must be 16000 Hz.
     * </pre>
     */
    AMR_WB(5, 5),
    UNRECOGNIZED(-1, -1),
    ;

    /**
     * <code>ENCODING_UNSPECIFIED = 0;</code>
     *
     * <pre>
     * Not specified. Will return result `INVALID_ARGUMENT`.
     * </pre>
     */
    public static final int ENCODING_UNSPECIFIED_VALUE = 0;
    /**
     * <code>LINEAR16 = 1;</code>
     *
     * <pre>
     * Uncompressed 16-bit signed little-endian samples.
     * This is the simplest encoding format, useful for getting started.
     * However, because it is uncompressed, it is not recommended for deployed
     * clients.
     * </pre>
     */
    public static final int LINEAR16_VALUE = 1;
    /**
     * <code>FLAC = 2;</code>
     *
     * <pre>
     * This is the recommended encoding format because it uses lossless
     * compression; therefore recognition accuracy is not compromised by a lossy
     * codec.
     * The stream FLAC format is specified at:
     * http://flac.sourceforge.net/documentation.html.
     * Only 16-bit samples are supported.
     * Not all fields in STREAMINFO are supported.
     * </pre>
     */
    public static final int FLAC_VALUE = 2;
    /**
     * <code>MULAW = 3;</code>
     *
     * <pre>
     * 8-bit samples that compand 14-bit audio samples using PCMU/mu-law.
     * </pre>
     */
    public static final int MULAW_VALUE = 3;
    /**
     * <code>AMR = 4;</code>
     *
     * <pre>
     * Adaptive Multi-Rate Narrowband codec. `sample_rate` must be 8000 Hz.
     * </pre>
     */
    public static final int AMR_VALUE = 4;
    /**
     * <code>AMR_WB = 5;</code>
     *
     * <pre>
     * Adaptive Multi-Rate Wideband codec. `sample_rate` must be 16000 Hz.
     * </pre>
     */
    public static final int AMR_WB_VALUE = 5;


    public final int getNumber() {
      if (index == -1) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    public static AudioEncoding valueOf(int value) {
      switch (value) {
        case 0: return ENCODING_UNSPECIFIED;
        case 1: return LINEAR16;
        case 2: return FLAC;
        case 3: return MULAW;
        case 4: return AMR;
        case 5: return AMR_WB;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AudioEncoding>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AudioEncoding> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AudioEncoding>() {
            public AudioEncoding findValueByNumber(int number) {
              return AudioEncoding.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.cloud.speech.v1.InitialRecognizeRequest.getDescriptor().getEnumTypes().get(0);
    }

    private static final AudioEncoding[] VALUES = values();

    public static AudioEncoding valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private AudioEncoding(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding)
  }

  public static final int ENCODING_FIELD_NUMBER = 1;
  private int encoding_;
  /**
   * <code>optional .google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding encoding = 1;</code>
   *
   * <pre>
   * [Required] Encoding of audio data sent in all `AudioRequest` messages.
   * </pre>
   */
  public int getEncodingValue() {
    return encoding_;
  }
  /**
   * <code>optional .google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding encoding = 1;</code>
   *
   * <pre>
   * [Required] Encoding of audio data sent in all `AudioRequest` messages.
   * </pre>
   */
  public com.google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding getEncoding() {
    com.google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding result = com.google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding.valueOf(encoding_);
    return result == null ? com.google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding.UNRECOGNIZED : result;
  }

  public static final int SAMPLE_RATE_FIELD_NUMBER = 2;
  private int sampleRate_;
  /**
   * <code>optional int32 sample_rate = 2;</code>
   *
   * <pre>
   * [Required] Sample rate in Hertz of the audio data sent in all
   * AudioRequest messages.
   * 16000 is optimal. Valid values are: 8000-48000.
   * </pre>
   */
  public int getSampleRate() {
    return sampleRate_;
  }

  public static final int LANGUAGE_CODE_FIELD_NUMBER = 3;
  private volatile java.lang.Object languageCode_;
  /**
   * <code>optional string language_code = 3;</code>
   *
   * <pre>
   * [Optional] The language of the supplied audio as a BCP-47 language tag.
   * Example: "en-GB"  https://www.rfc-editor.org/rfc/bcp/bcp47.txt
   * If omitted, defaults to "en-US".
   * </pre>
   */
  public java.lang.String getLanguageCode() {
    java.lang.Object ref = languageCode_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      languageCode_ = s;
      return s;
    }
  }
  /**
   * <code>optional string language_code = 3;</code>
   *
   * <pre>
   * [Optional] The language of the supplied audio as a BCP-47 language tag.
   * Example: "en-GB"  https://www.rfc-editor.org/rfc/bcp/bcp47.txt
   * If omitted, defaults to "en-US".
   * </pre>
   */
  public com.google.protobuf.ByteString
      getLanguageCodeBytes() {
    java.lang.Object ref = languageCode_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      languageCode_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MAX_ALTERNATIVES_FIELD_NUMBER = 4;
  private int maxAlternatives_;
  /**
   * <code>optional int32 max_alternatives = 4;</code>
   *
   * <pre>
   * [Optional] Maximum number of recognition hypotheses to be returned.
   * Specifically, the maximum number of `SpeechRecognitionAlternative` messages
   * within each `SpeechRecognitionResult`.
   * The server may return fewer than `max_alternatives`.
   * Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
   * `1`. If omitted, defaults to `1`.
   * </pre>
   */
  public int getMaxAlternatives() {
    return maxAlternatives_;
  }

  public static final int PROFANITY_FILTER_FIELD_NUMBER = 5;
  private boolean profanityFilter_;
  /**
   * <code>optional bool profanity_filter = 5;</code>
   *
   * <pre>
   * [Optional] If set to `true`, the server will attempt to filter out
   * profanities, replacing all but the initial character in each filtered word
   * with asterisks, e.g. "f***". If set to `false` or omitted, profanities
   * won't be filtered out.
   * Note that profanity filtering is not implemented for all languages.
   * If the language is not supported, this setting has no effect.
   * </pre>
   */
  public boolean getProfanityFilter() {
    return profanityFilter_;
  }

  public static final int CONTINUOUS_FIELD_NUMBER = 6;
  private boolean continuous_;
  /**
   * <code>optional bool continuous = 6;</code>
   *
   * <pre>
   * [Optional] If `false` or omitted, the recognizer will detect a single
   * spoken utterance, and it will cease recognition when the user stops
   * speaking. If `enable_endpointer_events` is `true`, it will return
   * `END_OF_UTTERANCE` when it detects that the user has stopped speaking.
   * In all cases, it will return no more than one `SpeechRecognitionResult`,
   * and set the `is_final` flag to `true`.
   * If `true`, the recognizer will continue recognition (even if the user
   * pauses speaking) until the client sends an `end_of_data` message or when
   * the maximum time limit has been reached. Multiple
   * `SpeechRecognitionResult`s with the `is_final` flag set to `true` may be
   * returned to indicate that the recognizer will not return any further
   * hypotheses for this portion of the transcript.
   * </pre>
   */
  public boolean getContinuous() {
    return continuous_;
  }

  public static final int INTERIM_RESULTS_FIELD_NUMBER = 7;
  private boolean interimResults_;
  /**
   * <code>optional bool interim_results = 7;</code>
   *
   * <pre>
   * [Optional] If this parameter is `true`, interim results may be returned as
   * they become available.
   * If `false` or omitted, only `is_final=true` result(s) are returned.
   * </pre>
   */
  public boolean getInterimResults() {
    return interimResults_;
  }

  public static final int ENABLE_ENDPOINTER_EVENTS_FIELD_NUMBER = 8;
  private boolean enableEndpointerEvents_;
  /**
   * <code>optional bool enable_endpointer_events = 8;</code>
   *
   * <pre>
   * [Optional] If this parameter is `true`, `EndpointerEvents` may be returned
   * as they become available.
   * If `false` or omitted, no `EndpointerEvents` are returned.
   * </pre>
   */
  public boolean getEnableEndpointerEvents() {
    return enableEndpointerEvents_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (encoding_ != com.google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding.ENCODING_UNSPECIFIED.getNumber()) {
      output.writeEnum(1, encoding_);
    }
    if (sampleRate_ != 0) {
      output.writeInt32(2, sampleRate_);
    }
    if (!getLanguageCodeBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessage.writeString(output, 3, languageCode_);
    }
    if (maxAlternatives_ != 0) {
      output.writeInt32(4, maxAlternatives_);
    }
    if (profanityFilter_ != false) {
      output.writeBool(5, profanityFilter_);
    }
    if (continuous_ != false) {
      output.writeBool(6, continuous_);
    }
    if (interimResults_ != false) {
      output.writeBool(7, interimResults_);
    }
    if (enableEndpointerEvents_ != false) {
      output.writeBool(8, enableEndpointerEvents_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (encoding_ != com.google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding.ENCODING_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, encoding_);
    }
    if (sampleRate_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, sampleRate_);
    }
    if (!getLanguageCodeBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(3, languageCode_);
    }
    if (maxAlternatives_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, maxAlternatives_);
    }
    if (profanityFilter_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, profanityFilter_);
    }
    if (continuous_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, continuous_);
    }
    if (interimResults_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, interimResults_);
    }
    if (enableEndpointerEvents_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, enableEndpointerEvents_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static com.google.cloud.speech.v1.InitialRecognizeRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.speech.v1.InitialRecognizeRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.InitialRecognizeRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.speech.v1.InitialRecognizeRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.InitialRecognizeRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.cloud.speech.v1.InitialRecognizeRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.InitialRecognizeRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.google.cloud.speech.v1.InitialRecognizeRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.InitialRecognizeRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.cloud.speech.v1.InitialRecognizeRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.speech.v1.InitialRecognizeRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code google.cloud.speech.v1.InitialRecognizeRequest}
   *
   * <pre>
   * The `InitialRecognizeRequest` message provides information to the recognizer
   * that specifies how to process the request.
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.cloud.speech.v1.InitialRecognizeRequest)
      com.google.cloud.speech.v1.InitialRecognizeRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.speech.v1.SpeechProto.internal_static_google_cloud_speech_v1_InitialRecognizeRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.speech.v1.SpeechProto.internal_static_google_cloud_speech_v1_InitialRecognizeRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.speech.v1.InitialRecognizeRequest.class, com.google.cloud.speech.v1.InitialRecognizeRequest.Builder.class);
    }

    // Construct using com.google.cloud.speech.v1.InitialRecognizeRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      encoding_ = 0;

      sampleRate_ = 0;

      languageCode_ = "";

      maxAlternatives_ = 0;

      profanityFilter_ = false;

      continuous_ = false;

      interimResults_ = false;

      enableEndpointerEvents_ = false;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.cloud.speech.v1.SpeechProto.internal_static_google_cloud_speech_v1_InitialRecognizeRequest_descriptor;
    }

    public com.google.cloud.speech.v1.InitialRecognizeRequest getDefaultInstanceForType() {
      return com.google.cloud.speech.v1.InitialRecognizeRequest.getDefaultInstance();
    }

    public com.google.cloud.speech.v1.InitialRecognizeRequest build() {
      com.google.cloud.speech.v1.InitialRecognizeRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.cloud.speech.v1.InitialRecognizeRequest buildPartial() {
      com.google.cloud.speech.v1.InitialRecognizeRequest result = new com.google.cloud.speech.v1.InitialRecognizeRequest(this);
      result.encoding_ = encoding_;
      result.sampleRate_ = sampleRate_;
      result.languageCode_ = languageCode_;
      result.maxAlternatives_ = maxAlternatives_;
      result.profanityFilter_ = profanityFilter_;
      result.continuous_ = continuous_;
      result.interimResults_ = interimResults_;
      result.enableEndpointerEvents_ = enableEndpointerEvents_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.speech.v1.InitialRecognizeRequest) {
        return mergeFrom((com.google.cloud.speech.v1.InitialRecognizeRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.speech.v1.InitialRecognizeRequest other) {
      if (other == com.google.cloud.speech.v1.InitialRecognizeRequest.getDefaultInstance()) return this;
      if (other.encoding_ != 0) {
        setEncodingValue(other.getEncodingValue());
      }
      if (other.getSampleRate() != 0) {
        setSampleRate(other.getSampleRate());
      }
      if (!other.getLanguageCode().isEmpty()) {
        languageCode_ = other.languageCode_;
        onChanged();
      }
      if (other.getMaxAlternatives() != 0) {
        setMaxAlternatives(other.getMaxAlternatives());
      }
      if (other.getProfanityFilter() != false) {
        setProfanityFilter(other.getProfanityFilter());
      }
      if (other.getContinuous() != false) {
        setContinuous(other.getContinuous());
      }
      if (other.getInterimResults() != false) {
        setInterimResults(other.getInterimResults());
      }
      if (other.getEnableEndpointerEvents() != false) {
        setEnableEndpointerEvents(other.getEnableEndpointerEvents());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.cloud.speech.v1.InitialRecognizeRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.cloud.speech.v1.InitialRecognizeRequest) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int encoding_ = 0;
    /**
     * <code>optional .google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding encoding = 1;</code>
     *
     * <pre>
     * [Required] Encoding of audio data sent in all `AudioRequest` messages.
     * </pre>
     */
    public int getEncodingValue() {
      return encoding_;
    }
    /**
     * <code>optional .google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding encoding = 1;</code>
     *
     * <pre>
     * [Required] Encoding of audio data sent in all `AudioRequest` messages.
     * </pre>
     */
    public Builder setEncodingValue(int value) {
      encoding_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional .google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding encoding = 1;</code>
     *
     * <pre>
     * [Required] Encoding of audio data sent in all `AudioRequest` messages.
     * </pre>
     */
    public com.google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding getEncoding() {
      com.google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding result = com.google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding.valueOf(encoding_);
      return result == null ? com.google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding.UNRECOGNIZED : result;
    }
    /**
     * <code>optional .google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding encoding = 1;</code>
     *
     * <pre>
     * [Required] Encoding of audio data sent in all `AudioRequest` messages.
     * </pre>
     */
    public Builder setEncoding(com.google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      encoding_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>optional .google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding encoding = 1;</code>
     *
     * <pre>
     * [Required] Encoding of audio data sent in all `AudioRequest` messages.
     * </pre>
     */
    public Builder clearEncoding() {
      
      encoding_ = 0;
      onChanged();
      return this;
    }

    private int sampleRate_ ;
    /**
     * <code>optional int32 sample_rate = 2;</code>
     *
     * <pre>
     * [Required] Sample rate in Hertz of the audio data sent in all
     * AudioRequest messages.
     * 16000 is optimal. Valid values are: 8000-48000.
     * </pre>
     */
    public int getSampleRate() {
      return sampleRate_;
    }
    /**
     * <code>optional int32 sample_rate = 2;</code>
     *
     * <pre>
     * [Required] Sample rate in Hertz of the audio data sent in all
     * AudioRequest messages.
     * 16000 is optimal. Valid values are: 8000-48000.
     * </pre>
     */
    public Builder setSampleRate(int value) {
      
      sampleRate_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 sample_rate = 2;</code>
     *
     * <pre>
     * [Required] Sample rate in Hertz of the audio data sent in all
     * AudioRequest messages.
     * 16000 is optimal. Valid values are: 8000-48000.
     * </pre>
     */
    public Builder clearSampleRate() {
      
      sampleRate_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object languageCode_ = "";
    /**
     * <code>optional string language_code = 3;</code>
     *
     * <pre>
     * [Optional] The language of the supplied audio as a BCP-47 language tag.
     * Example: "en-GB"  https://www.rfc-editor.org/rfc/bcp/bcp47.txt
     * If omitted, defaults to "en-US".
     * </pre>
     */
    public java.lang.String getLanguageCode() {
      java.lang.Object ref = languageCode_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        languageCode_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string language_code = 3;</code>
     *
     * <pre>
     * [Optional] The language of the supplied audio as a BCP-47 language tag.
     * Example: "en-GB"  https://www.rfc-editor.org/rfc/bcp/bcp47.txt
     * If omitted, defaults to "en-US".
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLanguageCodeBytes() {
      java.lang.Object ref = languageCode_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        languageCode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string language_code = 3;</code>
     *
     * <pre>
     * [Optional] The language of the supplied audio as a BCP-47 language tag.
     * Example: "en-GB"  https://www.rfc-editor.org/rfc/bcp/bcp47.txt
     * If omitted, defaults to "en-US".
     * </pre>
     */
    public Builder setLanguageCode(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      languageCode_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string language_code = 3;</code>
     *
     * <pre>
     * [Optional] The language of the supplied audio as a BCP-47 language tag.
     * Example: "en-GB"  https://www.rfc-editor.org/rfc/bcp/bcp47.txt
     * If omitted, defaults to "en-US".
     * </pre>
     */
    public Builder clearLanguageCode() {
      
      languageCode_ = getDefaultInstance().getLanguageCode();
      onChanged();
      return this;
    }
    /**
     * <code>optional string language_code = 3;</code>
     *
     * <pre>
     * [Optional] The language of the supplied audio as a BCP-47 language tag.
     * Example: "en-GB"  https://www.rfc-editor.org/rfc/bcp/bcp47.txt
     * If omitted, defaults to "en-US".
     * </pre>
     */
    public Builder setLanguageCodeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      languageCode_ = value;
      onChanged();
      return this;
    }

    private int maxAlternatives_ ;
    /**
     * <code>optional int32 max_alternatives = 4;</code>
     *
     * <pre>
     * [Optional] Maximum number of recognition hypotheses to be returned.
     * Specifically, the maximum number of `SpeechRecognitionAlternative` messages
     * within each `SpeechRecognitionResult`.
     * The server may return fewer than `max_alternatives`.
     * Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
     * `1`. If omitted, defaults to `1`.
     * </pre>
     */
    public int getMaxAlternatives() {
      return maxAlternatives_;
    }
    /**
     * <code>optional int32 max_alternatives = 4;</code>
     *
     * <pre>
     * [Optional] Maximum number of recognition hypotheses to be returned.
     * Specifically, the maximum number of `SpeechRecognitionAlternative` messages
     * within each `SpeechRecognitionResult`.
     * The server may return fewer than `max_alternatives`.
     * Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
     * `1`. If omitted, defaults to `1`.
     * </pre>
     */
    public Builder setMaxAlternatives(int value) {
      
      maxAlternatives_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 max_alternatives = 4;</code>
     *
     * <pre>
     * [Optional] Maximum number of recognition hypotheses to be returned.
     * Specifically, the maximum number of `SpeechRecognitionAlternative` messages
     * within each `SpeechRecognitionResult`.
     * The server may return fewer than `max_alternatives`.
     * Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
     * `1`. If omitted, defaults to `1`.
     * </pre>
     */
    public Builder clearMaxAlternatives() {
      
      maxAlternatives_ = 0;
      onChanged();
      return this;
    }

    private boolean profanityFilter_ ;
    /**
     * <code>optional bool profanity_filter = 5;</code>
     *
     * <pre>
     * [Optional] If set to `true`, the server will attempt to filter out
     * profanities, replacing all but the initial character in each filtered word
     * with asterisks, e.g. "f***". If set to `false` or omitted, profanities
     * won't be filtered out.
     * Note that profanity filtering is not implemented for all languages.
     * If the language is not supported, this setting has no effect.
     * </pre>
     */
    public boolean getProfanityFilter() {
      return profanityFilter_;
    }
    /**
     * <code>optional bool profanity_filter = 5;</code>
     *
     * <pre>
     * [Optional] If set to `true`, the server will attempt to filter out
     * profanities, replacing all but the initial character in each filtered word
     * with asterisks, e.g. "f***". If set to `false` or omitted, profanities
     * won't be filtered out.
     * Note that profanity filtering is not implemented for all languages.
     * If the language is not supported, this setting has no effect.
     * </pre>
     */
    public Builder setProfanityFilter(boolean value) {
      
      profanityFilter_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool profanity_filter = 5;</code>
     *
     * <pre>
     * [Optional] If set to `true`, the server will attempt to filter out
     * profanities, replacing all but the initial character in each filtered word
     * with asterisks, e.g. "f***". If set to `false` or omitted, profanities
     * won't be filtered out.
     * Note that profanity filtering is not implemented for all languages.
     * If the language is not supported, this setting has no effect.
     * </pre>
     */
    public Builder clearProfanityFilter() {
      
      profanityFilter_ = false;
      onChanged();
      return this;
    }

    private boolean continuous_ ;
    /**
     * <code>optional bool continuous = 6;</code>
     *
     * <pre>
     * [Optional] If `false` or omitted, the recognizer will detect a single
     * spoken utterance, and it will cease recognition when the user stops
     * speaking. If `enable_endpointer_events` is `true`, it will return
     * `END_OF_UTTERANCE` when it detects that the user has stopped speaking.
     * In all cases, it will return no more than one `SpeechRecognitionResult`,
     * and set the `is_final` flag to `true`.
     * If `true`, the recognizer will continue recognition (even if the user
     * pauses speaking) until the client sends an `end_of_data` message or when
     * the maximum time limit has been reached. Multiple
     * `SpeechRecognitionResult`s with the `is_final` flag set to `true` may be
     * returned to indicate that the recognizer will not return any further
     * hypotheses for this portion of the transcript.
     * </pre>
     */
    public boolean getContinuous() {
      return continuous_;
    }
    /**
     * <code>optional bool continuous = 6;</code>
     *
     * <pre>
     * [Optional] If `false` or omitted, the recognizer will detect a single
     * spoken utterance, and it will cease recognition when the user stops
     * speaking. If `enable_endpointer_events` is `true`, it will return
     * `END_OF_UTTERANCE` when it detects that the user has stopped speaking.
     * In all cases, it will return no more than one `SpeechRecognitionResult`,
     * and set the `is_final` flag to `true`.
     * If `true`, the recognizer will continue recognition (even if the user
     * pauses speaking) until the client sends an `end_of_data` message or when
     * the maximum time limit has been reached. Multiple
     * `SpeechRecognitionResult`s with the `is_final` flag set to `true` may be
     * returned to indicate that the recognizer will not return any further
     * hypotheses for this portion of the transcript.
     * </pre>
     */
    public Builder setContinuous(boolean value) {
      
      continuous_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool continuous = 6;</code>
     *
     * <pre>
     * [Optional] If `false` or omitted, the recognizer will detect a single
     * spoken utterance, and it will cease recognition when the user stops
     * speaking. If `enable_endpointer_events` is `true`, it will return
     * `END_OF_UTTERANCE` when it detects that the user has stopped speaking.
     * In all cases, it will return no more than one `SpeechRecognitionResult`,
     * and set the `is_final` flag to `true`.
     * If `true`, the recognizer will continue recognition (even if the user
     * pauses speaking) until the client sends an `end_of_data` message or when
     * the maximum time limit has been reached. Multiple
     * `SpeechRecognitionResult`s with the `is_final` flag set to `true` may be
     * returned to indicate that the recognizer will not return any further
     * hypotheses for this portion of the transcript.
     * </pre>
     */
    public Builder clearContinuous() {
      
      continuous_ = false;
      onChanged();
      return this;
    }

    private boolean interimResults_ ;
    /**
     * <code>optional bool interim_results = 7;</code>
     *
     * <pre>
     * [Optional] If this parameter is `true`, interim results may be returned as
     * they become available.
     * If `false` or omitted, only `is_final=true` result(s) are returned.
     * </pre>
     */
    public boolean getInterimResults() {
      return interimResults_;
    }
    /**
     * <code>optional bool interim_results = 7;</code>
     *
     * <pre>
     * [Optional] If this parameter is `true`, interim results may be returned as
     * they become available.
     * If `false` or omitted, only `is_final=true` result(s) are returned.
     * </pre>
     */
    public Builder setInterimResults(boolean value) {
      
      interimResults_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool interim_results = 7;</code>
     *
     * <pre>
     * [Optional] If this parameter is `true`, interim results may be returned as
     * they become available.
     * If `false` or omitted, only `is_final=true` result(s) are returned.
     * </pre>
     */
    public Builder clearInterimResults() {
      
      interimResults_ = false;
      onChanged();
      return this;
    }

    private boolean enableEndpointerEvents_ ;
    /**
     * <code>optional bool enable_endpointer_events = 8;</code>
     *
     * <pre>
     * [Optional] If this parameter is `true`, `EndpointerEvents` may be returned
     * as they become available.
     * If `false` or omitted, no `EndpointerEvents` are returned.
     * </pre>
     */
    public boolean getEnableEndpointerEvents() {
      return enableEndpointerEvents_;
    }
    /**
     * <code>optional bool enable_endpointer_events = 8;</code>
     *
     * <pre>
     * [Optional] If this parameter is `true`, `EndpointerEvents` may be returned
     * as they become available.
     * If `false` or omitted, no `EndpointerEvents` are returned.
     * </pre>
     */
    public Builder setEnableEndpointerEvents(boolean value) {
      
      enableEndpointerEvents_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool enable_endpointer_events = 8;</code>
     *
     * <pre>
     * [Optional] If this parameter is `true`, `EndpointerEvents` may be returned
     * as they become available.
     * If `false` or omitted, no `EndpointerEvents` are returned.
     * </pre>
     */
    public Builder clearEnableEndpointerEvents() {
      
      enableEndpointerEvents_ = false;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.cloud.speech.v1.InitialRecognizeRequest)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.InitialRecognizeRequest)
  private static final com.google.cloud.speech.v1.InitialRecognizeRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.cloud.speech.v1.InitialRecognizeRequest();
  }

  public static com.google.cloud.speech.v1.InitialRecognizeRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InitialRecognizeRequest>
      PARSER = new com.google.protobuf.AbstractParser<InitialRecognizeRequest>() {
    public InitialRecognizeRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new InitialRecognizeRequest(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  public static com.google.protobuf.Parser<InitialRecognizeRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InitialRecognizeRequest> getParserForType() {
    return PARSER;
  }

  public com.google.cloud.speech.v1.InitialRecognizeRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

