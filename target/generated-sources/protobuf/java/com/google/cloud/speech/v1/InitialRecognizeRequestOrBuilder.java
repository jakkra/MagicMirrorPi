// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/speech/v1/cloud-speech.proto

package com.google.cloud.speech.v1;

public interface InitialRecognizeRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.speech.v1.InitialRecognizeRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional .google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding encoding = 1;</code>
   *
   * <pre>
   * [Required] Encoding of audio data sent in all `AudioRequest` messages.
   * </pre>
   */
  int getEncodingValue();
  /**
   * <code>optional .google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding encoding = 1;</code>
   *
   * <pre>
   * [Required] Encoding of audio data sent in all `AudioRequest` messages.
   * </pre>
   */
  com.google.cloud.speech.v1.InitialRecognizeRequest.AudioEncoding getEncoding();

  /**
   * <code>optional int32 sample_rate = 2;</code>
   *
   * <pre>
   * [Required] Sample rate in Hertz of the audio data sent in all
   * AudioRequest messages.
   * 16000 is optimal. Valid values are: 8000-48000.
   * </pre>
   */
  int getSampleRate();

  /**
   * <code>optional string language_code = 3;</code>
   *
   * <pre>
   * [Optional] The language of the supplied audio as a BCP-47 language tag.
   * Example: "en-GB"  https://www.rfc-editor.org/rfc/bcp/bcp47.txt
   * If omitted, defaults to "en-US".
   * </pre>
   */
  java.lang.String getLanguageCode();
  /**
   * <code>optional string language_code = 3;</code>
   *
   * <pre>
   * [Optional] The language of the supplied audio as a BCP-47 language tag.
   * Example: "en-GB"  https://www.rfc-editor.org/rfc/bcp/bcp47.txt
   * If omitted, defaults to "en-US".
   * </pre>
   */
  com.google.protobuf.ByteString
      getLanguageCodeBytes();

  /**
   * <code>optional int32 max_alternatives = 4;</code>
   *
   * <pre>
   * [Optional] Maximum number of recognition hypotheses to be returned.
   * Specifically, the maximum number of `SpeechRecognitionAlternative` messages
   * within each `SpeechRecognitionResult`.
   * The server may return fewer than `max_alternatives`.
   * Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
   * `1`. If omitted, defaults to `1`.
   * </pre>
   */
  int getMaxAlternatives();

  /**
   * <code>optional bool profanity_filter = 5;</code>
   *
   * <pre>
   * [Optional] If set to `true`, the server will attempt to filter out
   * profanities, replacing all but the initial character in each filtered word
   * with asterisks, e.g. "f***". If set to `false` or omitted, profanities
   * won't be filtered out.
   * Note that profanity filtering is not implemented for all languages.
   * If the language is not supported, this setting has no effect.
   * </pre>
   */
  boolean getProfanityFilter();

  /**
   * <code>optional bool continuous = 6;</code>
   *
   * <pre>
   * [Optional] If `false` or omitted, the recognizer will detect a single
   * spoken utterance, and it will cease recognition when the user stops
   * speaking. If `enable_endpointer_events` is `true`, it will return
   * `END_OF_UTTERANCE` when it detects that the user has stopped speaking.
   * In all cases, it will return no more than one `SpeechRecognitionResult`,
   * and set the `is_final` flag to `true`.
   * If `true`, the recognizer will continue recognition (even if the user
   * pauses speaking) until the client sends an `end_of_data` message or when
   * the maximum time limit has been reached. Multiple
   * `SpeechRecognitionResult`s with the `is_final` flag set to `true` may be
   * returned to indicate that the recognizer will not return any further
   * hypotheses for this portion of the transcript.
   * </pre>
   */
  boolean getContinuous();

  /**
   * <code>optional bool interim_results = 7;</code>
   *
   * <pre>
   * [Optional] If this parameter is `true`, interim results may be returned as
   * they become available.
   * If `false` or omitted, only `is_final=true` result(s) are returned.
   * </pre>
   */
  boolean getInterimResults();

  /**
   * <code>optional bool enable_endpointer_events = 8;</code>
   *
   * <pre>
   * [Optional] If this parameter is `true`, `EndpointerEvents` may be returned
   * as they become available.
   * If `false` or omitted, no `EndpointerEvents` are returned.
   * </pre>
   */
  boolean getEnableEndpointerEvents();
}
