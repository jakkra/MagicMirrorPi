// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto

package com.google.logging.v2;

public interface LogSinkOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.logging.v2.LogSink)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional string name = 1;</code>
   *
   * <pre>
   * Required. The client-assigned sink identifier. Example:
   * `"my-severe-errors-to-pubsub"`.
   * Sink identifiers are limited to 1000 characters
   * and can include only the following characters: `A-Z`, `a-z`,
   * `0-9`, and the special characters `_-.`.
   * </pre>
   */
  java.lang.String getName();
  /**
   * <code>optional string name = 1;</code>
   *
   * <pre>
   * Required. The client-assigned sink identifier. Example:
   * `"my-severe-errors-to-pubsub"`.
   * Sink identifiers are limited to 1000 characters
   * and can include only the following characters: `A-Z`, `a-z`,
   * `0-9`, and the special characters `_-.`.
   * </pre>
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <code>optional string destination = 3;</code>
   *
   * <pre>
   * The export destination. See
   * [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
   * Examples: `"storage.googleapis.com/a-bucket"`,
   * `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
   * </pre>
   */
  java.lang.String getDestination();
  /**
   * <code>optional string destination = 3;</code>
   *
   * <pre>
   * The export destination. See
   * [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
   * Examples: `"storage.googleapis.com/a-bucket"`,
   * `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
   * </pre>
   */
  com.google.protobuf.ByteString
      getDestinationBytes();

  /**
   * <code>optional string filter = 5;</code>
   *
   * <pre>
   * An [advanced logs filter](/logging/docs/view/advanced_filters)
   * that defines the log entries to be exported.  The filter must be
   * consistent with the log entry format designed by the
   * `outputVersionFormat` parameter, regardless of the format of the
   * log entry that was originally written to Cloud Logging.
   * Example: `"logName:syslog AND severity&gt;=ERROR"`.
   * </pre>
   */
  java.lang.String getFilter();
  /**
   * <code>optional string filter = 5;</code>
   *
   * <pre>
   * An [advanced logs filter](/logging/docs/view/advanced_filters)
   * that defines the log entries to be exported.  The filter must be
   * consistent with the log entry format designed by the
   * `outputVersionFormat` parameter, regardless of the format of the
   * log entry that was originally written to Cloud Logging.
   * Example: `"logName:syslog AND severity&gt;=ERROR"`.
   * </pre>
   */
  com.google.protobuf.ByteString
      getFilterBytes();

  /**
   * <code>optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;</code>
   *
   * <pre>
   * The log entry version used when exporting log entries from this
   * sink.  This version does not have to correspond to the version of
   * the log entry when it was written to Cloud Logging.
   * </pre>
   */
  int getOutputVersionFormatValue();
  /**
   * <code>optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;</code>
   *
   * <pre>
   * The log entry version used when exporting log entries from this
   * sink.  This version does not have to correspond to the version of
   * the log entry when it was written to Cloud Logging.
   * </pre>
   */
  com.google.logging.v2.LogSink.VersionFormat getOutputVersionFormat();
}
